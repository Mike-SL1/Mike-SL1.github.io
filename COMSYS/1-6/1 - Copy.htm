<!DOCTYPE HTML><html><head><title>Comment system-1</title>
<link rel="icon" type="image/png" sizes="32x32" href="icon24.png"></head>
<style>	*::selection{background:transparent;}
	.eventBtn,.eventBtn1{margin-left:10px;background:pink;}	.eventBtn1{background:palegreen;}
	.nameField{margin-left:10px;width:40ch;text-align:center;background:mistyrose;padding:5px;}

.bin1{width:600px; height:96vh; margin:0 auto;border:1px solid blue; }		
	.commentContainer{display:inline-block;margin-top:1%;height:84%;overflow-y:auto;}
			
	.contentHeader,.contentBottom,.replyBlock,.inputForm,
	.inputFormHeader,.inputFormMain,.rateCtrl,.listItem,.itemMark,.sortMenuOrdPic{display:flex;}

.commentBlock,.innerReplyBlock{display:inline-flex;}
.commentBlockSeparator{border-bottom:1px solid lightgray;margin:5px auto;width:50%;}
     .userAvatarWrap{ margin:0px 5px 0px 5px;background:yellow;text-align:center;}
	.userAvatar,.userAvatarWrap,.spHoop{ width:40px;}
	.userAvatar{ width:40px; height:40px; border-radius:50%; object-fit: cover;}
	.userContent{padding: 3px;background:yellow;border:1px solid blue; }
		.contentHeader,.contentBottom,.rateCtrl{background:orange; height:20px;}
			.headerF0{background:red;}.headerF1{background:cyan;}.headerF2{background:lime;}.headerF3{background:pink;}
			.headerF4{background:yellow;}
			.headerF,.bottomF{border:1px solid black;margin:0px 5px 0px 5px;padding: 0px 3px 0px 3px;  }
		.commentText{background:yellowgreen;min-height:50px;width:500px;overflow-wrap:break-word;padding:0px 10px 0px 10px;}
		.contentBottom{background:palegreen;}
			.bottomReplyF0,.bottomCommentF0{background:red;}
			.bottomReplyF0,.bottomCommentF0,.bottomCommentF1,.rateCtrl,.sortMenu,.listItem{cursor:pointer;}
		.rateCtrl{background:lightgray;font-family:Sans-Serif;font-size:16px;font-weight:700;padding: 0px;
			justify-content:center;align-items:center;align-self:center; border-radius:50%;}		
.inputForm{}
	.replyBlock{width:100%;}
	.formSendBtn,.replyFormCnclBtn{background:palegreen;height:20px;align-self:center;}
		     .replyFormCnclBtn{background:pink;}
.inputFormContainer{padding: 3px;}
	.inputFormHeader{width:100%;justify-content:space-between;}
	.inputFormMain{width:100%;background:green;}
		.textInput{width:50ch;outline:none;border:5px solid lime;background:white;margin:5px 5px 10px 5px;}
		.textInput::selection{background:blue; color:white;}

.sortMenuWrap{margin-left:10px; display:inline-flex;}		
.sortMenu{padding:5px;background:yellow;}		
	.listContainer{padding:20px 5px 0px 5px;width:200px;top:0px; 	background:orange; }
		.listItem{margin:5px 0px 5px 0px;background:aqua;color:green;}	.itemMark,.sortMenuOrdPic{justify-content:center;
											  align-items:center;}
										.itemDesc{padding:0px 5px 0px 5px;}
.ordPic{width:20px; background-color:blue;}
</style>
<body>		<div class='sortMenuWrap'></div><div class='bin1'><div class='commentContainer'></div></div>
<script src="userbase.js"></script><script>
'use strict';		
const doc=document, 	px = 'px',	normal = 'normal';	let user=[];
			
let usrID ={	'byCIDX':[],	/* to get user ID number by comment index */
		'byRIDX':[],	/* to get user (replier) ID number by reply index */
		'byName':{}	/* to get user ID number by user name */
},
uChange=[],uSort=[];
		 uSort.push(0);
	       uChange.push(0);
    usrID['byCIDX'].push(0);	   
    usrID['byRIDX'].push(0);       
/* uBase - users personal data from 'userbase.js' */
    		uBase.unshift(null);	// zero number - no user Nr.0 object in uBase	
let cBase=[];	cBase.push(0);		// comments base
let rBase=[];	rBase.push(0);		// replies base

let showFavoritesOnly = false;
const userRatingChangesLimit = 1,  	// rating counter changes attempts limit
   defaultSortMenuItemNumber = 2,	// [0..3]
   maxTextLength = 100;			// comment text max length 	
const menuSort=[{'text':'По дате',		'krit':'date'},
		{'text':'По количеству оценок',	'krit':'rate'},
		{'text':'По актуальности',	'krit':normal},
		{'text':'По количеству ответов','krit':'answers'}];
const container = doc.querySelector('.commentContainer');
const getDateTime = () => {const tday1 = new Date(), date1 = [	tday1.getDate(), tday1.getMonth()+1,
/* Actual Date and Time Acquisition */	   			tday1.getHours(),tday1.getMinutes()];
			   date1.forEach((x,n,date1item)=>{if (x<10){date1item[n]='0'+x;}});
return {'date':`${date1[0]}.${date1[1]}`, 'time':`${date1[2]}:${date1[3]}`};
};
let auxMockDateTime=null;		// to store the previous function mockDateTime return value
const mockDateTime = (a) => {
	const tday1 = new Date(); 
	let day,month,monthPlus=false,date1;
	  if (a) {
		  day=Number(a['date'].slice(0,2));	
		  month=Number(a['date'].slice(3,5));	
	  } else {day=0;month=1;}
			     
	day++;	if (day>30) {day=1;monthPlus=true; }
	if (monthPlus) {month++;monthPlus=false; if (month>12){month=1;}}
				date1 = [day,month,tday1.getHours(),tday1.getMinutes()];
			   	date1.forEach((x,n,date1item)=>{if (x<10){date1item[n]='0'+x;}});
return {'date':`${date1[0]}.${date1[1]}`, 'time':`${date1[2]}:${date1[3]}`};
};
const buildUsersIndexTable = () => {
// ext. for new users enrollment to acquire userID by name
	uBase.forEach((i,count)=>{if (i) {usrID['byName'][i['name']]=count;}});
};    buildUsersIndexTable();
class Comment{  
		constructor(userName){	this.user = userName;
					this.uChange = {'rPermissions':[],  'cPermissions':[]};
					this.uSort = {'sortCriteria':null,'sortOrder':false};	     		
		}
		get getName() 	    {return this.user;}
		get getIDByName()   {return usrID['byName'][this.user];}
		rebuildComments() {}
		placeComment(){ }
		placeReply  (){ }
		allowToChangeRate (){}
}
class User extends Comment{
		placeComment(commentText){
				auxMockDateTime=mockDateTime(auxMockDateTime);	
				let lastComment = putCommentToBase(this.user,commentText,auxMockDateTime);
				showComment(lastComment,false);
		}
		placeReply(comIDX,orderNumber){					
				auxMockDateTime=mockDateTime(auxMockDateTime);
				putReplyToBase (this.user,orderNumber,auxMockDateTime,comIDX);
				
		}
		allowToChangeRate (IDX,base){
			const poolTest = (auxPool,IDX) => {    const zero = 0;
					let maxChanges = userRatingChangesLimit,  changes=zero;
					maxChanges--; if (maxChanges<zero) {maxChanges = zero;}
					auxPool.forEach((i)=>{if (i===IDX){changes++;}});		
					if (changes > maxChanges) {return false;} else {return true;}
			};	
			if (base===cBase) {if (poolTest (this.uChange['cPermissions'],IDX)){
						this.uChange['cPermissions'].push(IDX);
						/* --- */
						return true;}
			} else {	   if (poolTest (this.uChange['rPermissions'],IDX)){
						this.uChange['rPermissions'].push(IDX);
						/* --- */
						return true;}
				};	return false;
		}
		rebuildComments(sortCriteria=null,reverse=false){
			const ordPic = doc.querySelector('.ordPic'), ordPicStl = ordPic.style,
			      vShift = Math.round(Number(ordPicStl.height.slice(0,2))*2)+'%';	

			if (sortCriteria===null) {if (this.uSort['sortCriteria']===null) {
							 sortCriteria=defaultSortMenuItemNumber;
						 } else {sortCriteria=this.uSort['sortCriteria'];}
			};

			dispChoice (sortCriteria);
			
			if (this.uSort['sortCriteria']===sortCriteria) {
				if (reverse) {this.uSort['sortOrder']=!this.uSort['sortOrder'];}
			} else {this.uSort['sortOrder']=false;}

			if (this.uSort['sortOrder'])  {rebuildAll(menuSort[sortCriteria]['krit'],'ascending');
					      ordPicStl.rotate='-135deg';	ordPicStl.translate=`0px -${vShift}`;} 
				 	else {rebuildAll(menuSort[sortCriteria]['krit'],'descending');
					      ordPicStl.rotate='45deg';		ordPicStl.translate=`0px +${vShift}`;};
			this.uSort['sortCriteria']=sortCriteria;
		}
}
user.push(0);	uBase.forEach((i)=>{if (i) {user.push(new User(i['name']));}});		
let activeUser = user[1+Math.floor(Math.random()*4)];
								
const cls = () => {const iNameToRemove =['.commentBlock','.commentBlockSeparator','.spHoop','.replyForm','.replyBlock',
					'.inputForm']; 
		   let blocksToRemove=[];
		   iNameToRemove.forEach((i)=>{blocksToRemove.push(doc.querySelectorAll(i));});
		   blocksToRemove.forEach((blocks)=>{blocks.forEach((block)=>{block.remove();});});
};
// add event handlers to all class bottomF0 div's (comment's reply Buttons)
let funcPool =[];	// to store event handlers functions pool, only for 'buildReplyButtonsHandlers'
const buildReplyButtonsHandlers = () => {
   /* old handlers removing */
	funcPool.forEach((arg)=>{arg['node'].removeEventListener('click',arg['function']);});
	funcPool =[];
   /* setting new handlers */
	const replyBtn = doc.querySelectorAll('.bottomCommentF0');
	 replyBtn.forEach((i,orderNumber)=>{
	    	const placeReplyForm = (event) => {activeUser.placeReply(Number(event.target.dataset.cIDX),orderNumber);}; 	
		funcPool.push({'node':i,'function':placeReplyForm});	
		i.addEventListener('click', placeReplyForm);			
	 }); 
};
// sort by normal,answers,rate,date
const rebuildAll = (krit = normal,sortOrder='descending') =>{
      let order=false; if (sortOrder==='ascending') {order=true;}
      cls();	let cIDXArray = [];
      const fillcIDXArray = (cIDXValue)=>{	
					if (!cIDXValue) {return;}
					// order: ascending - true , descending - false 
					if (order) {cIDXArray.unshift(cIDXValue);} else {cIDXArray.push(cIDXValue);}
      };
if (krit===normal) {
	// sort by normal
	cBase.forEach((commentRecord,cIDX)=>{fillcIDXArray(cIDX);});
} else {
 	// sort by answers,rate,date
	let sBase = [];  	
	//sBase Fill
	let locBas=null;
	cBase.forEach((commentRecord)=>{
		   let result;
		   if (commentRecord) {
			if (krit==='date') {const a=Number(commentRecord['date']),b=Math.floor(a);
					    result = b + Math.round((a-b)*100*31);
					    }
			else {result = commentRecord[krit];}
		       sBase.push(result);
		       if (locBas===null) {locBas=result;} else {if (result<locBas) {locBas=result;}}		
		   };
	}); 
	    locBas--;	// local minimum setting
	let locMax, cIDXi;
	do {	locMax = locBas; cIDXi = 0;
		sBase.forEach((ans,n)=>{if (ans>locMax) {locMax=ans;cIDXi=n;}});
		if (locMax === locBas) {break;}
		sBase[cIDXi]=locBas;
		fillcIDXArray(cIDXi+1);
	} while (true);
  
};
cIDXArray.forEach((comIDX)=>{
			if (comIDX) {if (showFavoritesOnly && !findFav (comIDX,cBase)) {return;}
					 showComment(comIDX,true);};
});  buildReplyButtonsHandlers();
//main comment form 0 - main form	
const inputTextFormMain = doc.querySelector('.inputForm');
	if (!inputTextFormMain) {inputTextForm (activeUser.getName,0);}	     	
};
const putDiv=(className,baseForm,mode=null,innerContent='') =>{
	let retVal = null;   if (mode===null) {mode=2;}
	const sampDiv = doc.createElement("div");	sampDiv.className = className;	
							sampDiv.innerHTML=innerContent;
	switch (mode){case 0: container.insertBefore(sampDiv,baseForm); break;
		      case 1: baseForm.innerHTML='';
		      case 2: baseForm.appendChild(sampDiv); 	case 3: break;
	default:console.log('putDiv:incorrect operMode -',mode);}		
return sampDiv;};
// 			---	sort Menu Sorting order selector	---
const sortMenuWrap = doc.querySelector('.sortMenuWrap'),
	sortMenuLink = putDiv('sortMenu',sortMenuWrap),		
		listContainer = putDiv('listContainer',sortMenuWrap),
		sortOrdPicWrap= putDiv('sortMenuOrdPic',sortMenuWrap),
			ordPic= putDiv('ordPic',sortOrdPicWrap),
			ordPicWidth = ordPic.getBoundingClientRect().width, 
	back = window.getComputedStyle(ordPic,null).getPropertyValue('background-color'),
	srtMnuSty=listContainer.style,	ordPicStl = ordPic.style;
		ordPicStl.background=`linear-gradient(135deg, ${back} 50%, transparent 50%)`;
		ordPicStl.transform ='skew(15deg, 15deg)';	
		ordPicStl.height = ordPicWidth+px;
		sortOrdPicWrap.style.width=Math.round(Math.sqrt(3*Math.pow(ordPicWidth,2)))+px;	
	sortMenuWrap.style.position='relative'; 
	srtMnuSty.display = 'none';		srtMnuSty.position='absolute';		
						srtMnuSty.zIndex='1';
const dispChoice = (iNumber) =>{		
	  const itemMark = doc.querySelectorAll('.itemMark');	       
	  	itemMark.forEach((mark)=>{mark.style.opacity='0';});
			     itemMark[iNumber].style.opacity='1';
				sortMenuLink.innerHTML = `${menuSort[iNumber]['text']}`;
};	
menuSort.forEach((i,n)=>{ 
	const itemLine = putDiv('listItem',listContainer),
		 mark1 = putDiv('itemMark',itemLine),	     		mark1Stl = mark1.style,
		markSign = putDiv('markSign',mark1),			markSignStl= markSign.style,
	      itemDesc = putDiv('itemDesc',itemLine,2,`${i['text']}`),	nPlusOne = n+1;
		if (i['krit']===normal) {mark1Stl.opacity='1';} else {mark1Stl.opacity='0';}
 	
		markSignStl.borderColor = 'red';	markSignStl.borderStyle='solid';
		markSignStl.rotate='30deg';		markSignStl.borderWidth='0 2px 2px 0';

	      markSign.dataset.choiceNum=nPlusOne;	itemLine.dataset.choiceNum=nPlusOne;
		 mark1.dataset.choiceNum=nPlusOne;	itemDesc.dataset.choiceNum=nPlusOne;	
  							
	itemLine.addEventListener('click',(ev)=>{
		const iNumber = Number(ev.target.dataset.choiceNum)-1;	
			dispChoice (iNumber);
				activeUser.rebuildComments(iNumber,true);
	srtMnuSty.display = 'none';	
	});
});
sortMenuLink.addEventListener('click',() =>{
	srtMnuSty.display = 'block';	
const	itemMark = doc.querySelectorAll('.itemMark'), 	itemDesc = doc.querySelector('.itemDesc'),
	itemDescDim = itemDesc.getBoundingClientRect(),	markDim  = Math.floor(itemDescDim.height),
	markSign = doc.querySelectorAll('.markSign');
   itemMark.forEach((mark)=>{
		const markStl = mark.style;	markStl.width =markDim+px;
						markStl.height=markDim+px;});
   markSign.forEach((sign)=>{
		const signStl = sign.style;							
		signStl.width = Math.floor(markDim/2.7) +px;	signStl.height =Math.floor(markDim/1.5) +px;
		signStl.translate='0px -' + Math.floor(markDim/5) + px;});
});
listContainer.addEventListener('click',()=>{srtMnuSty.display = 'none';
});// end of 		---	sort Menu Sorting order selector	---

const putBtn = (className1,baseForm,caption,func) => {
	const sample = doc.createElement("button");	sample.innerHTML=caption;	
							sample.className = className1; 	
	if (baseForm) {baseForm.appendChild(sample);
	} else {baseForm=doc.querySelector('div');doc.body.insertBefore(sample, baseForm);}			
sample.addEventListener('click',func);
return sample;
};
const setFav = (IDX,base=cBase) =>{
	let favorites = [], inBase=true; const userID=activeUser.getIDByName;		
	base[IDX]['fav'].forEach((i)=>{if (i===userID) {inBase=false;} else {favorites.push(i);}});
					    if (inBase) {favorites.push(userID);}
	base[IDX]['fav']=favorites;						return inBase;
};
const findFav = (IDX,base=cBase) =>{
	let y=false; 			 const userID=activeUser.getIDByName;	
	base[IDX]['fav'].forEach((i)=>{if (i===userID) {y=true;}});		return y;
};
const buildBlock = (baseForm,IDX,baseType=false) =>{

const setItemWidth = (i) =>{const iHeight = Math.floor(i.getBoundingClientRect().height)+'px';i.style.width = iHeight;}
let userNamereplyToComment = '* unknown *',
	    userData = uBase[usrID['byCIDX'][IDX]],   	hFC = [],		
	    base=cBase,bottomF = 'bottomCommentF',	bFC = [],
	    comment=true, favItemOrder = 1; 
			
			if (baseType) {	comment=false; 			
					base=rBase;
					userData = uBase[usrID['byRIDX'][IDX]];
					bottomF = 'bottomReplyF';  favItemOrder = 0;						
					userNamereplyToComment=uBase[usrID['byCIDX'][base[IDX]['tocIDX']]]['name'];
					hFC = ['1.BackArrow',userNamereplyToComment];
					}
			else {bFC.push('0.Reply');}
		bFC.push('AAA');		bFC.push('-'); bFC.push(base[IDX]['rate']); bFC.push('+');
	    	hFC.unshift(userData['name']);
		hFC.push(base[IDX]['date']);		hFC.push('*S*');	hFC.push(base[IDX]['time']);
	/*User Avatar Section*/
		putDiv("userAvatarWrap",baseForm,2,`<img src=${userData['imgSrc']} class="userAvatar">`);		
	/*User Content Section: Header (FIO, BackArrow Sign, Date, Time*/
		const usrCntnt = putDiv("userContent",baseForm);
			/*User content section header container*/ 
			const contentHeader = putDiv("contentHeader",usrCntnt);   	
/*Header blocks building*/		
	/* hFC = [userData['name'],'1.BackArrow',userNamereplyToComment,base[IDX]['date'],'*S*',base[IDX]['time']]; */     
			hFC.forEach((hFC,i)=>{putDiv(`headerF headerF${i}`,contentHeader,2,`${hFC}`);});
				/*User Comment Textblock*/
				putDiv("commentText",usrCntnt,2,`${base[IDX]['text']}`);
			/*User content section bottom container*/
			const contentBottom = putDiv("contentBottom",usrCntnt);/*
/*Bottom blocks building*/
   	/* bFC = ['0.Reply',`${base[IDX]['fav']}`,`${base[IDX]['rate']}`]; */
	let minusF = null;
			bFC.forEach((bFC,i)=>{ 
				let contentBottomFclass = '';
				switch (bFC) {case '-':contentBottomFclass =`rateCtrl`; break;
					      case '+':contentBottomFclass =`rateCtrl`; break;
					       default:contentBottomFclass =`bottomF ${bottomF}${i}`;}
				const contentBottomF = putDiv(contentBottomFclass,contentBottom,2,`${bFC}`),
				// cBFs - auxiliary local constant
				      cBFs = contentBottomF.style;      	
		switch (bFC) {case '-':	setItemWidth(contentBottomF);	minusF = contentBottomF;
					cBFs.color='red';			
				      contentBottomF.addEventListener('click',(ev) =>{
					if (activeUser.allowToChangeRate (IDX,base)){
					base[IDX]['rate']--;	ev.target.nextSibling.innerHTML=base[IDX]['rate'];}}); 	  break;
			      case '+':	setItemWidth(contentBottomF);
					cBFs.color='green';
				      contentBottomF.addEventListener('click',(ev) =>{
					if (activeUser.allowToChangeRate (IDX,base)){
					base[IDX]['rate']++;	ev.target.previousSibling.innerHTML=base[IDX]['rate'];}});break;
		default:contentBottomF.dataset.cIDX=IDX; 
			if (favItemOrder === i) {				      	
			   if (findFav(IDX,base)) {cBFs.background = 'red';} else {cBFs.background = 'green';}
			   contentBottomF.addEventListener('click',(ev) =>{
			      if (setFav (Number(ev.target.dataset.cIDX),base)) {
			         cBFs.background = 'red';
				// parent comment switch to favorite	
			         if (base===rBase && !findFav(rBase[IDX]['tocIDX'],cBase)) {
				   // comment block favorite display on
			            const cmntFavFPool= doc.querySelectorAll('.bottomCommentF1');
			            cmntFavFPool.forEach((i)=>{if (Number(i.dataset.cIDX)===rBase[IDX]['tocIDX']) {
								i.style.background='red';}});			   
			            setFav(rBase[IDX]['tocIDX'],cBase);
				 };
			      } else {cBFs.background = 'green';
				// all child replies switch off favorites
				if (base===cBase){
				   const rplytFavFPool= doc.querySelectorAll('.bottomReplyF0');
				   rBase.forEach((i,rIDX)=>{
					if (i['tocIDX']===IDX) {if (findFav(rIDX,rBase)) {setFav(rIDX,rBase);
					// all replies favorites displays set off
					rplytFavFPool.forEach((replyFav)=>{
					if (Number(replyFav.dataset.cIDX)===rIDX){replyFav.style.background='green';}})
					};
					};
				   });
				};
			      };

						});
			};
		};
		});
	// rating field background color
	if (minusF) minusF.nextSibling.style.background='yellow';
}
const showReply = (frameElement,rIDX)=> {
putDiv("commentBlockSeparator",frameElement,0);
const replyBlock = putDiv('replyBlock',frameElement,0); frameElement.remove();
	 	   putDiv('spHoop',replyBlock);	
const innerReplyBlock = putDiv("innerReplyBlock",replyBlock);	buildBlock(innerReplyBlock,rIDX,true);
};
const inputTextForm = (userName,orderNumber,dateTime=null,comIDX=null) =>{
	let textLength = 0, allowComment=false, messageRecord, separ;	
	const senderID = usrID['byName'][userName],		/* message length warning display colors */
	      tooLongMessage = 'Слишком длинное сообщение',		inactive ='#000000', active = '#FF0000',
	      max1000chrsMessage = `Макс. ${maxTextLength} символов`,
	 commBlocksArray = doc.querySelectorAll('.commentBlock'),
		inputForm = putDiv("inputForm",null,3), userData = uBase[usrID['byName'][userName]],
		inputFormAva = putDiv("userAvatarWrap",inputForm,2,`<img src=${userData['imgSrc']} class="userAvatar">`),
		inputFormContainer = putDiv("inputFormContainer",inputForm),
			inputFormHeader = putDiv("inputFormHeader",inputFormContainer),	
				userNameField = putDiv("userNameField",inputFormHeader,2,userName),
				symbolCounter = putDiv("symbolCounter",inputFormHeader,2,`${textLength}/${maxTextLength}`),
				warningField  = putDiv("warningField",inputFormHeader,2,max1000chrsMessage),
			inputFormMain = putDiv("inputFormMain",inputFormContainer),
		   textInput = doc.createElement("textarea");	
			warningField.style.color=inactive;	
				textInput.className = "textInput";   
				textInput.placeholder = 'Введите здесь текст Вашего комментария';
 				textInput.name = 'userInputText';	textInput.style.resize='none';
									inputFormMain.appendChild(textInput);
			textInput.addEventListener('input',(i)=>{
				const maxLength = 50, rowsQuantity = 2; textLength = textInput.value.length;
				  textInput.rows = rowsQuantity+Math.floor(textLength / maxLength);
				symbolCounter.innerHTML=`${textLength}/${maxTextLength}`;
				if (textLength > maxTextLength)	{
					warningField.style.color=active; 	allowComment = false;
					warningField.innerHTML=tooLongMessage;
				} else {warningField.style.color=inactive; 	allowComment = true;
					warningField.innerHTML=max1000chrsMessage;}	
});
	if (comIDX) {/* reply form */
			commBlocksArray[orderNumber].insertAdjacentElement('afterend', inputForm);
		      	separ = putDiv("commentBlockSeparator",inputForm,0);} 
	       else {/* comment form */
		      const centeredWrap = doc.querySelector('.bin1');
		      separ = putDiv("commentBlockSeparator",commBlocksArray[orderNumber],0);
		      centeredWrap.insertBefore(inputForm,container);	}
				 
	putBtn('formSendBtn',inputFormMain,'SEND',()=>{ 
	// Get real Date and Time if no Date and Time specified
	if (!dateTime) {dateTime = getDateTime();}
	if (senderID && allowComment && textLength) {
		if (comIDX) { 
			      /* reply form */
				messageRecord = {'tocIDX':comIDX,'text':textInput.value,'rate':0,'date':dateTime['date'],
					         'time':dateTime['time'],'fav':[]};
				cBase[comIDX]['answers']++;
				usrID['byRIDX'].push(senderID);		separ.remove();
				rBase.push(messageRecord);		showReply(inputForm,rBase.length-1);
									
		} else	    {
			      /* comment form */
				putCommentToBase (userName,textInput.value,dateTime);
							   textInput.value = ''; 	showComment(cBase.length-1,false);
							   textLength=0;		buildReplyButtonsHandlers();
					};
				};
	});				
	if (comIDX) {putBtn('replyFormCnclBtn',inputFormMain,'Cancel',()=>{inputForm.remove();separ.remove();});}
return inputForm};
const putReplyToBase = (userName,orderNumber,dateTime,comIDX) =>{
	// leave this space/function for extension
	 inputTextForm (userName,orderNumber,dateTime,comIDX);
};
const putCommentToBase = (userName,text=null,dateTime=null) =>{	
	let messageRecord;
	const errorMessage = 'putCommentToBase:no such user in base '+userName,	senderID = usrID['byName'][userName];
	// Get real Date and Time if no Date and Time specified
	if (!dateTime) {dateTime = getDateTime();}	
		        					 
		if (senderID) {
			messageRecord = {'text':text,'rate':0,'date':dateTime['date'],'time':dateTime['time'],'fav':[],'answers':0};
				usrID['byCIDX'].push(senderID);
				cBase.push(messageRecord);	return cBase.length-1;}
		else { 
		      console.log(errorMessage);		return errorMessage;}		
}; 
const showComment = (comIDX,replyShow)=> {
/*users base - {'name':'a','surName':'aA','age':20,		
		'imgSrc':'a.jpg'} 
cBase.unshift(0); - no user number zero - comments base
 comment base  - [{'text':'комментарий 0 - user 0','rate':10,'date':dateM,'time':timeM,'fav':[],'answers':0},
		  {},
		  {},
		  {}
]
rBase.unshift(0); - no user number zero - reply base
 reply base -  [[{'tocIDX':2,'text':'комментарий 0 - user 0','rate':10,'date':dateM,'time':timeM,'fav':[]},{},{}],
		[],
		[],
		[]
]*/	
let replyForm, replierName;	 
	const prevCmntBlk = doc.querySelector('.commentBlock');			
	/*Comment Block Root Element*/
		const emptyDiv = putDiv("commentBlockSeparator",prevCmntBlk,0),
		      commBlk =  putDiv("commentBlock",emptyDiv,0);
		
		if (replyShow) {			
			const rBaseLength =rBase.length-1; let reverseCount;
			for (let rIDX=rBaseLength;rIDX>0;rIDX--)
			{
			   if ((rBase[rIDX]['tocIDX']===comIDX) && (!showFavoritesOnly || findFav (rIDX,rBase))) {
								replyForm=putDiv("replyForm",emptyDiv,0);
								showReply (replyForm,rIDX);
			   }
			}
		}
		// remove the lowest separator
		if (!prevCmntBlk) {emptyDiv.remove();}
buildBlock(commBlk,comIDX,false);	
return commBlk;
};
/* Test comments */
	user[1].placeComment('Первый комментарий Андрея');
	user[1].placeComment('Второй комментарий Андрея');
	user[1].placeComment('Третий комментарий Андрея');
	user[2].placeComment('Первый комментарий Бориса');
	user[2].placeComment('Второй комментарий Бориса');
	user[3].placeComment('Первый комментарий Вики');
	user[3].placeComment('Второй комментарий Вики');
	user[1].placeComment('Четвёртый комментарий Андрея');
	user[2].placeComment('Третий комментарий Бориса');
 	user[4].placeComment('Первый комментарий Гоши - idx 10 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

const currentUser = `Активен пользователь: `;	 

let lastButton, nameField = putDiv('nameField',null,3,`${currentUser}${activeUser.getName} (userID ${activeUser.getIDByName})`);	
    		nameField.style.display='inline-block';
/* active user selector */
const newUserLogIn = (userName) => {activeUser = user[usrID['byName'][userName]];
				    activeUser.rebuildComments();				
				    const eventBtns1 = doc.querySelectorAll('.eventBtn1');
					  eventBtns1.forEach((i)=>{const iSt = i.style;
								   iSt.boxShadow='0px 0px 0px 0px';
								   iSt.borderColor='black';	iSt.fontWeight='400';});
				    nameField.innerHTML=`${currentUser}${activeUser.getName} (userID ${activeUser.getIDByName})`;}
      newUserLogIn (activeUser.getName);	//to show main comment form at page start/refresh

/* test buttons, user switch buttons */
putBtn('eventBtn',null,'CLS',cls);
uBase.forEach((i)=>{if (i) {
		    lastButton=putBtn('eventBtn1',null,i['name'],(ev)=>{newUserLogIn(i['name']);
									const btn= ev.target.style;
									btn.fontWeight='700';	btn.borderColor='lime';
									btn.boxShadow='0px 0px 3px 2px yellow';});}}); 
putBtn('eventBtn1',null,'FAV',(ev)=>{const btn= ev.target.style;
				     if (showFavoritesOnly) {showFavoritesOnly=false;btn.background='palegreen';
					} else {showFavoritesOnly=true;btn.background='pink';}
				activeUser.rebuildComments();
});
lastButton.insertAdjacentElement('afterend', nameField);

/* Diag section */
const diag = () =>{console.clear();	const ast ='     ';
console.log(ast,ast,'   ---   Diag begin   ---');
console.log(ast,'*','users:');			uBase.forEach((i,n)=>{console.log('user#',n,' :',i);});
console.log(ast,'*','userID Table');		for (let key in userID){console.log(usrID['byName'][key],key);};
console.log(ast,'*','comments:');		cBase.forEach((i)=>{console.log(i);});
console.log(ast,'*','userID By cIDX Table');	
	usrID['byCIDX'].forEach((i,n)=>{if (n) {console.log('commentIDX ',n,' ','user# ',i,'(',uBase[i]['name'],')');}});
console.log(ast,'*','replies:');		rBase.forEach((i)=>{console.log(i);});
console.log(ast,'*','userID By rIDX Table');	
	usrID['byRIDX'].forEach((i,n)=>{if (n) {console.log('replyIDX ',n,' ','user# ',i,'(',uBase[i]['name'],')');}});
 return ast+ast+ast+'   ---   Diag end   ---';};	//diag();
</script></body></html>