Глобальные переменные и состояние:
Пример: переменные runOnce, intervalID, genLoader. Возможно, лучше держать их в локальном контексте или использовать class для управления состоянием.
Много логики внутри функции categorySelect:
Функция categorySelect управляет множеством разных задач (запрос данных, показ загрузчика, построение карточек, обработка событий и т.д.). Лучше разделить эти задачи на отдельные функции или методы для лучшей декомпозиции.
Магические числа и строки:
Ты используешь магические числа и строки (например, 5, 1% auto 10%, "gainsboro", и т.д.). Их стоит вынести в константы с осмысленными именами для улучшения читаемости и гибкости.
Ошибка при изменении размера окна:
В обработчике события resize функция setProp(genLoader, {...}) будет вызываться даже в случае, если загрузчик уже был удален. Это может привести к ошибке. Нужно добавить проверку на существование genLoader.
Жестко заданные стили в коде:
Некоторые стили задаются непосредственно в коде (setProp, margin: "1% auto 10%", и т.д.). Лучше вынести их в CSS-классы для улучшения контроля над стилями.

Советы по улучшению:
Рефакторинг крупных функций:
Раздели функции, которые выполняют несколько задач. Например, categorySelect можно разделить на: показ загрузчика, получение данных, построение карточек и скролл.
Использование async/await для асинхронного кода:
Применение async/await может сделать код асинхронных операций (например, в fetchData) более линейным и удобочитаемым, чем работа с коллбэками.
Использование классов для управления состоянием:
Вместо использования глобальных переменных и функций-обработчиков, можешь попробовать использовать классы для создания более чистой структуры кода. Например, создать класс для управления состоянием страницы, который будет содержать методы для показа/скрытия загрузчика, загрузки карточек, и т.д.
Хранение состояния в объекте:
Можно использовать один объект для хранения состояния (например, state = { category, isLoading, cardsLoaded }), что сделает код более гибким и контролируемым.
