<!DOCTYPE HTML><html lang="ru"><head>	<meta charset="UTF-8">	<meta name="viewport" content="width=device-width, initial-scale=1.0">
					<link rel="icon" type="image/png" sizes="64x64" href="./img/bird1.gif">			
<title>bird-1-25</title>	      </head>
<style> *::selection{background:transparent;} *:hover{cursor:default;}
	.gameContainer, .flightControl, .ind, .centeredWrap,.speedSwitch,.sect,.def{display:flex;}     
									  .ind,.centeredWrap,.def{justify-content:center;}
  .centeredWrap{width:98vw;height:98vh;}      .speedSwitch,.flightControl,.ind,.gameContainer,.centeredWrap,.def,.sect{align-items:center;}
  							   .flightControl{flex-flow: column nowrap;margin: 0 10px 0;
									  padding:5px 5px 10px;	width:7ch;  background:lightgray;}
  .borderRadius{border-radius:10px;}  	      						
       .canvasHolder{margin-right:20px; width:431px; height:768px;box-shadow:4px 4px 10px 0px gray;border:1px solid blue;}		
   
				.speedSwitch,.ind,.rules{width:92%;margin:0 auto;}
				.speedSwitch{justify-content:space-between;padding:5px 10px 5px 10px;
					      background:linear-gradient(to right, lime 20%, yellow 65%, pink 85%, magenta 100%);}
				.speedSelect{height:20px;width:20px;}  

.infoHeader {letter-spacing:3px;margin:15px 0px 10px 0px; }	    	.textCenter{text-align:center;}   
.speedSelectorHeader{letter-spacing:13px;margin:15px 5px 10px; }       	.fontBoldFace{font-weight:600;}
.infoHeader,.speedSelectorHeader,.flightControl{font-size:22px;}	.indDesc{padding:0px 5px 0px 5px;}
  
		   .ind{height:4ch;color:white; border:1px solid gray;margin-top:10px;background:whitesmoke;}	
.speedButton,.sect,.ind{font-size:18px;}
	      .def,.ind{font-family:sans-serif;}
	      .def{width:15%;height:4ch;font-size:16px;letter-spacing:.5px;}  .sect{margin:14px 0px 0px 5px;}
.labelTablo{margin-top:1ch;}
.score,.scoreMax{color:black;}				  .desc{width:85%;margin-left:10px;line-height:101%;}   		
</style>       	<body>
<div class="centeredWrap"> 
  <div class="gameContainer"> 
	<div class="flightControl"> 		<div>Flap</div>	<div>Bird</div>
						    <div class='ver'></div>
						<div class="ind">Halt	</div>
						<div class="ind">Ceil	</div>
						<div class="ind">Keyb	</div>
						<div class="ind">Drop	</div>
						<div class="ind">Run	</div>
						<div class="ind">Mouse	</div>
						<div class="ind">Pause	</div>
						<div class="ind">Collide</div>	
						<div class="ind">Plan	</div>	
							<div class="labelTablo">Счёт	</div>
						<div class="ind score">0</div>		
							<div class="labelTablo">Рекорд	</div>
						<div class="ind scoreMax">--</div>	</div>
	<div class="canvasHolder borderRadius"> 				
				<canvas class="borderRadius" id="birdGame" width="431" height="768">    </canvas>	
	</div>
	<div class="canvasHolder borderRadius indDesc">
		<!-- content generated by script описание назначения индикаторов -->
		<div class="textCenter fontBoldFace speedSelectorHeader">Скорость полёта</div>
		<div class="speedSwitch borderRadius"></div>	
	<div class="sect">
	    <div class="rules textCenter">Для запуска игровой сессии, щёлкните по чижику мышкой.</div>
	</div>
	</div>
  </div>
</div>
<script>'use strict';
const gameAsset = {img:"./img/flappy-bird-set.png", pipe:{x1:432,x2:510,y:108,width:77,height:480},
						    bird:{x:432, y:0,width:51, height:36}};
const doc = document;
const bgImg = new Image();	      bgImg.src = gameAsset.img;
const birdGame = doc.getElementById("birdGame"),	ind = doc.querySelectorAll('.ind'),
      gameCtx = birdGame.getContext("2d"),			score = doc.querySelector('.score'),
								scoreRecord = doc.querySelector('.scoreMax'),
      version = doc.querySelector('.ver'),		speedSwitch = doc.querySelector('.speedSwitch');
      version.innerHTML='v.26';
// описание назначения индикаторов
const indDescription = doc.querySelector('.indDesc');
const upAndDownKeysText = "ереход на управление с клавиатуры (клавиши 'вверх', 'вниз'). ",	
      birdCollisionText = "толкновение птицы с препятствием. Завершение игры.",
      descriptionText = [
   /*0*/{clr:'#FF0000',	 	def:"Halt",	desc:"Авария. Падение птицы или с"+birdCollisionText+" Пока горит индикатор (5 сек.), перезапуск игры щелчком мыши невозможен."},
   /*1*/{clr:'#32CD32',		def:"Ceil",	desc:"Достигнут потолок высоты полёта."},
   /*2*/{clr:'#87CEFA',		def:"Keyb",	desc:"П"+upAndDownKeysText},
   /*3*/{clr:'#FF00FF',		def:"Drop",	desc:"Началось падение с ускорением."},
   /*4*/{clr:'#008B8B',		def:"Run",	desc:"Алгоритм работает. (нет останова)"},
   /*5*/{clr:'#0000FF',		def:"Mouse",	desc:"Переход на управление мышью. (основной режим работы)"},
   /*6*/{clr:'#A0522D',		def:"Pause",	desc:"Временный останов счёта (по нажатию клавиши 'пробел'). Возможен п"+upAndDownKeysText},
   /*7*/{clr:'#FF0000',		def:"Collide",	desc:"С"+birdCollisionText},
   /*8*/{clr:'#008000',		def:"Plan",	desc:"Полёт в режиме планирования."}],	 
      definitionQuantity = descriptionText.length;
		descriptionText[2].desc = descriptionText[2].desc + descriptionText[8].desc;		
for (let i=0;i<definitionQuantity;i++) {indDescription.insertAdjacentHTML('afterbegin',
				`<div class="sect"><div class="def"></div> <div class="desc"></div></div>`);}
indDescription.insertAdjacentHTML('afterbegin',`<div class="textCenter fontBoldFace infoHeader">Назначение индикаторов:</div>`);
const termDefinition = doc.querySelectorAll('.def'),	termDescription = doc.querySelectorAll('.desc');
termDefinition.forEach((td,i) => {td.innerHTML = descriptionText[i].def; td.style.background = descriptionText[i].clr+"23"; });
termDescription.forEach((td,i) => {td.innerHTML = descriptionText[i].desc;});
// переключатель скорости полёта
const MAX_GEAR = 11;
for (let i=0;i<MAX_GEAR;i++) {
speedSwitch.insertAdjacentHTML('beforeend',`<div class="textCenter speedButton"><label for="key${i}">${i+1}</label><br>
<input class="speedSelect" id="key${i}" type="radio" name="speed1"/></div>`);}

const speedSwitchKey = doc.querySelectorAll('.speedSelect');
// отмена фокуса на кнопках переключателя скорости
speedSwitchKey.forEach((i)=>{i.addEventListener('focus',()=>{i.blur()})});
// начальная скорость полёта
let GEAR = 8;	       speedSwitchKey[GEAR-1].checked=true;	       	
// для отключения управления паузой после аварийного останова
let haltStop=false;							        
// индикаторы состояния алгоритма управления
const indOn = (n) =>{ind[n].style.background =descriptionText[n].clr;};		const indOff = (n) =>{ind[n].style.background ='';}
// процедура получения состояния индикатора
const indSt = (n) =>{if (ind[n].style.background) return true; else return false;}
// процедура генерации целого случайного числа в диапазоне [0..m)
const rnd = (m) => {return Math.floor(Math.random()*(m));}
// фон
// делитель частоты 
let syncDiv=0;	
const background = {x:birdGame.width,   syncDiv: syncDiv,     frameStep: 2,  skipCycle: syncDiv};			
// птица
// период махания крыльями
const wingPeriod = 15;	
const birdJitterX = 80,	birdRatio = gameAsset.bird.height/gameAsset.bird.width,
			birdHeight = gameAsset.pipe.height/15,			flightHeightInitial = 300,

      bird1 = {flapSpeed:wingPeriod, 	wingNumber:wingPeriod*3,wingCountMax:wingPeriod*3,
	      height:birdHeight, 	ceiling:150,		lowest:700,		goUpSpeed:4 - Math.floor(GEAR*.2),
	      width:birdHeight/birdRatio, fly:'',		goUpTimeoutId:0,	goUpTimeout:250 - GEAR *2,	
	      jittPeriod:1500,		jittTime:50,		sustainTimeoutId:0,	sustainTimeout:Math.floor(1800/GEAR),
	      flightHeight:flightHeightInitial,			keybJogTime:20,		keybJogStep:2,
	      shiftX:(birdGame.width - birdJitterX)/2 - birdHeight/birdRatio,		haltPauseTimeout:5000,
	      x:0,	XP:0,		acceleration:0,		accelerationFactor:0.03 + GEAR/400,  widthCollideCorrection:5};
// пересчёт переменных при изменении скорости
const reCalc = () => {syncDiv = MAX_GEAR - GEAR;     if (syncDiv<1) {syncDiv=0;}
		      background.syncDiv=syncDiv;   background.skipCycle=syncDiv;
		      bird1.goUpSpeed=4 - Math.floor(GEAR*.3);	  bird1.goUpTimeout=250 - GEAR *1.5; 
		      bird1.sustainTimeout=Math.floor(1800/GEAR); bird1.accelerationFactor=0.03 + GEAR/400;}
// получение начальных значения переменных для первого запуска
reCalc();
// переключатель скорости
speedSwitch.addEventListener('click',()=>{speedSwitchKey.forEach((key,num)=>{if (key.checked) {GEAR=num+1;reCalc();}})});
// птица: джиттер по горизонтальной координате
bird1.x = bird1.shiftX + birdJitterX/2;		bird1.XP=bird1.x;
setInterval(()=>{bird1.XP = bird1.shiftX + rnd(birdJitterX);},bird1.jittPeriod);
setInterval(()=>{if (bird1.x>bird1.XP) {bird1.x--;};  
		 if (bird1.x<bird1.XP) {bird1.x++;};},bird1.jittTime);
// труба 
const PIPE = {minHeight:300,		gap:gameAsset.pipe.height /4,	width:bird1.width*2, 	 
	      interval:bird1.width*6, 	distance:0, 			disable:true};  
// счётчик пройденных труб
let pipeCount = 0;   
let pipe = [];			
const putPipe = () => {		if (PIPE.disable) {return;}
	  let pipeSource1 ={  up:{x:gameAsset.pipe.x1,	 width:gameAsset.pipe.width,
		       	       y:gameAsset.pipe.y,	height:gameAsset.pipe.height},

		 	 down:{x:gameAsset.pipe.x2,	 width:gameAsset.pipe.width,
		     	       y:gameAsset.pipe.y,	height:gameAsset.pipe.height}
};								 
	const pipeLength = birdGame.height/2-PIPE.gap+rnd(gameAsset.pipe.height-PIPE.minHeight),	
	      gapPlusLength = PIPE.gap + pipeLength;
				pipeSource1.up.y = gameAsset.pipe.y + (gameAsset.pipe.height - pipeLength);				
				pipeSource1.up.height = pipeLength;
					 
				pipeSource1.down.height = birdGame.height - gapPlusLength;
				
	const pipeOnCanvas1 = { up:{width:PIPE.width, height:pipeSource1.up.height},
			      down:{width:PIPE.width, height:pipeSource1.down.height, 	y:gapPlusLength}};
pipe.push({src:pipeSource1, cnv:pipeOnCanvas1,  x:birdGame.width,   entered:false});
};
// record display maintain
const setRecordDisplay = function(){const recordKeyName = 'pipeRecord-9487'; 
				    const showRecord = (info) => {scoreRecord.innerHTML = `${info}`;}
				    const putToStorage = (m) =>  {localStorage.setItem(recordKeyName,m);}
				  function setRecordDisplay(){
							      let pipeRecord=localStorage.getItem(recordKeyName); 		
							      if (pipeRecord) {showRecord(pipeRecord);}
							if (pipeCount>pipeRecord) {
									putToStorage(pipeCount);showRecord(pipeCount);}}
return setRecordDisplay;}();	
// стоп плюс пауза перед следующим пуском на время bird1.haltPauseTimeout
const haltPause = () => {run=false;
			 // останов вызван аварией	
			 haltStop=true;
			 // last maximum score display
			 setRecordDisplay();
				// вкл. индикатора "Halt"		
			       indOn(0);
				// откл. опроса мыши
			       birdGame.removeEventListener('click',clickControl);
				// вкл. опроса мыши через время bird1.haltPauseTimeout
			       setTimeout(()=>{birdGame.addEventListener('click',clickControl);
						// сброс индикатора "Halt"
						indOff(0);}, bird1.haltPauseTimeout);}		
// сигнал "пуску готов"		 
let run=true;			 
// кадр					
const frame = () =>{   
	// для удаления труб, вышедших из употребления
	let junkOff = false;		
	// getting system clock pulse
	// получение синхроимпульса делением частоты кадров на делитель частоты (background.syncDiv)
	let sync = false; if (background.skipCycle) {background.skipCycle--;} 
			      else {background.skipCycle = background.syncDiv;	sync = true;
				    // получение горизонтальной координаты для движения фона		
			            background.x-=background.frameStep; 
				    if  (background.x<0) {background.x = birdGame.width;}}
	// фон		
	const bgSource = {	x: 0,					width: birdGame.width,
    				y: 0,					height: birdGame.height,
  };	// фон: первая часть 
	const bgImg1 = {	x: background.x,			width: birdGame.width,
    				y: 0,					height: birdGame.height,
  };
	gameCtx.drawImage(bgImg,	bgSource.x,	bgSource.y,	bgSource.width,		bgSource.height,
		      			bgImg1.x,	bgImg1.y,	bgImg1.width,		bgImg1.height);
	// фон: вторая часть 
  	const bgImg2 = {	x: background.x-birdGame.width, 	width: birdGame.width,
    				y: 0,					height: birdGame.height,
  };
	gameCtx.drawImage(bgImg,	bgSource.x, 	bgSource.y, 	bgSource.width, 	bgSource.height,
		      			bgImg2.x, 	bgImg2.y, 	bgImg2.width, 		bgImg2.height);
	// птица: выбор кадра крыла 1,2,3
  const flapFrame = () => { if (bird1.wingNumber) {bird1.wingNumber--;					 
				 } else {bird1.wingNumber = bird1.wingCountMax;}
			    return Math.floor((bird1.wingNumber % (bird1.flapSpeed * 3))/bird1.flapSpeed) * gameAsset.bird.height;
			}
  	// птица: получение координаты высоты
		switch (bird1.fly) {case 'up':   if (sync) {bird1.flightHeight-=bird1.goUpSpeed;}
						 // набор высоты - сброс индикатора "Drop", сброс индикатора "Plan"
				 	         bird1.acceleration = 1; indOff(3);	indOff(8);		
						 // птица машет крыльями
				 	         gameAsset.bird.y=flapFrame();		break;
				    			
				    case 'down': if (sync) {bird1.acceleration+=bird1.accelerationFactor;
							    bird1.flightHeight+=Math.floor(bird1.acceleration);}
						 // падение с ускорением - вкл. индикатора "Drop", сброс индикатора "Plan"
						 			 indOn(3);	 indOff(8);	break;
				// упрощённое управление высотой полёта - с клавиатуры
				case 'up1':   bird1.flightHeight-=bird1.keybJogStep;	 		break;							 	          									    			
				case 'down1': bird1.flightHeight+=bird1.keybJogStep;	 		break;	
				case 'plane': indOn(8);			 				break;	
					     // птица машет крыльями	 					
				    default: gameAsset.bird.y=flapFrame(); }
	if (bird1.flightHeight<bird1.ceiling) {bird1.flightHeight=bird1.ceiling;}	
		// отключение управления высотой при упрощённом управлении - переход в горизонтальное планирование
		if (bird1.fly==='up1' || bird1.fly=== 'down1') setTimeout(()=>{bird1.fly ='plane';},bird1.keybJogTime);		
		// падение птицы на землю - program stop
		if (bird1.flightHeight>bird1.lowest) {haltPause();} 				
		// упр. индикатором "Ceil" - достигнут потолок высоты 
		if (bird1.flightHeight===bird1.ceiling) {indOn(1);} else {indOff(1);}
	// птица: координаты источника изображениия
  	const birdSource = {
    			x: gameAsset.bird.x,		 width: gameAsset.bird.width,
    			y: gameAsset.bird.y,		height: gameAsset.bird.height,
  };
  	// птица: отображение на Canvas
  	gameCtx.drawImage(bgImg,	birdSource.x,
    					birdSource.y,
    					birdSource.width,
    					birdSource.height,	bird1.x,
    								bird1.flightHeight,
    								bird1.width,
    								bird1.height
  );	
	// труба	
	if (sync) {PIPE.distance = PIPE.distance + background.frameStep;} 
		// установка трубы через каждый PIPE.interval
	       if (PIPE.distance > PIPE.interval) {PIPE.distance=0; putPipe();}
	
	pipe.forEach((pipe) =>{	
				// труба: получение очередной координаты положения по оси X для каждой трубы 
				if (sync) pipe.x -= background.frameStep; 
				// одну старую трубу выкидываем из обслуживания - 1
				if (pipe.x < -pipe.cnv.down.width) {junkOff = true;}	
   // collision detection
   if (bird1.x < (pipe.x + PIPE.width - bird1.widthCollideCorrection)) {
	if ((bird1.x + bird1.width) > pipe.x){
			 // чижик вошёл в трубу
			 pipe.entered = true;
			 if (bird1.flightHeight < pipe.cnv.up.height || (bird1.flightHeight + bird1.height) > pipe.cnv.down.y) { 
			 									  //collision detected - program stop
			 									  indOn(7); haltPause();}
	}	
   } else {
	// score counting / show on display
	if (pipe.entered) {pipe.entered = false;	pipeCount++; 
							score.innerHTML = `${pipeCount}`;}
   }
	// труба верх	
	gameCtx.drawImage(bgImg, pipe.src.up.x,    	pipe.src.up.y,    	pipe.src.up.width,     	pipe.src.up.height, 
					  pipe.x, 	0,  			pipe.cnv.up.width,  	pipe.cnv.up.height);
	// труба низ	
	gameCtx.drawImage(bgImg, pipe.src.down.x,  	pipe.src.down.y,  	pipe.src.down.width,   	pipe.src.down.height, 
					  pipe.x,   	pipe.cnv.down.y, 	pipe.cnv.down.width, 	pipe.cnv.down.height);	
});
// одну старую трубу выкидываем из обслуживания - 2
if (junkOff) {pipe.shift();}	
// the next frame request
if (run) {indOn(4);	    //вкл. индикатора "Run"
	  window.requestAnimationFrame(frame);
	 } else {indOff(4); //сброс индикатора "Run"
}
}
doc.addEventListener('keydown',function(event){	
// отключение управления высотой мышкой
const miceOff = () =>{clearTimeout(bird1.goUpTimeoutId);clearTimeout(bird1.sustainTimeoutId);indOn(2);indOff(3);indOff(5);indOff(8);}
// опрос клавиатуры				  
if (!(event.repeat)||(true)) {								
switch (event.code){case 'ArrowUp':   bird1.fly='up1'; 	 miceOff();	break;
	            case 'Space': if (run) {// выдача сигнала "останов" (run=false), вкл. индикатора "Pause"	
						run=false;      indOn(6);} 
					    else 
					    // выдача сигнала "пуску готов" и вторичный запуск, 
					    // если останов не был вызван аварией 
						if (!haltStop) {indOff(6);run=true;frame(); }	break;
		    case 'ArrowDown': bird1.fly='down1'; miceOff();	break;}
}});
const clickControl = () => {if (run) {if (PIPE.disable) {PIPE.disable = false;}
						 bird1.fly = 'up'; 						 
						 indOff(2);	//сброс индикатора "Keyb"	 
						 indOn(5);	//вкл. индикатора "Mouse"
					      clearTimeout(bird1.goUpTimeoutId);	clearTimeout(bird1.sustainTimeoutId);
	bird1.goUpTimeoutId = setTimeout(()=>{bird1.fly = '';			
					      bird1.sustainTimeoutId = setTimeout(()=>{bird1.fly = 'down';},bird1.sustainTimeout);
					     },bird1.goUpTimeout);}
	else { 
	      // пуск в случае, если останов не был паузой
	      if (!indSt(6)){
	      //сигнал "пуску готов"
	      	run=true; 
			haltStop=false; //аварии нет
			indOff(0);	//сброс индикатора "Halt"
			indOff(3);	//сброс индикатора "Drop"
			indOff(2);	//сброс индикатора "Keyb"
			indOff(5);	//сброс индикатора "Mouse"
			indOff(6);	//сброс индикатора "Pause"
			indOff(7);	//сброс индикатора "Collide"
			indOn(8);	//вкл. индикатора "Plan"
		// last maximum score display
		setRecordDisplay();
			pipeCount = 0;   score.innerHTML = `${pipeCount}`;  		
			bird1.flightHeight=flightHeightInitial;
			PIPE.disable = true;   pipe = [];	bird1.fly = '';	
	      // вторичный запуск после останова
		frame();}}
}
// вкл. опроса мыши
birdGame.addEventListener('click',clickControl);		
// last maximum score display
setRecordDisplay();
// вкл. индикатора "Plan"
indOn(8);
// аварии нет	
haltStop=false;	
// первичный запуск	
bgImg.onload = frame;	
</script></body></html>
